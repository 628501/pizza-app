{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\karth\\\\Desktop\\\\states\\\\Frontend\\\\src\\\\hooks\\\\UseAuth.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// hooks/UseAuth.js\nimport { useState, useContext, createContext, useEffect } from \"react\";\nimport * as userService from \"../Services/UserService\";\nimport { toast } from \"react-toastify\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nconst navigate = useNavigate;\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    }\n  }, []);\n  const register = async (name, email, password) => {\n    try {\n      await userService.register(name, email, password);\n      toast.success('Registration successful');\n    } catch (err) {\n      toast.error(err.response.data.error);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      const user = await userService.login(email, password);\n      localStorage.setItem('user', JSON.stringify(user));\n      setUser(user);\n      toast.success('Login successful');\n    } catch (err) {\n      toast.error(err.response.data.error);\n    }\n  };\n  const logout = async () => {\n    await userService.logout();\n    setUser(null);\n    toast.success('Logout successful');\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      register,\n      login,\n      logout,\n      user\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n};\n_s(AuthProvider, \"5s2qRsV95gTJBmaaTh11GoxYeGE=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["useState","useContext","createContext","useEffect","userService","toast","useNavigate","jsxDEV","_jsxDEV","AuthContext","navigate","AuthProvider","children","_s","user","setUser","storedUser","localStorage","getItem","JSON","parse","register","name","email","password","success","err","error","response","data","login","setItem","stringify","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/karth/Desktop/states/Frontend/src/hooks/UseAuth.js"],"sourcesContent":["// hooks/UseAuth.js\r\nimport { useState, useContext, createContext, useEffect } from \"react\";\r\nimport * as userService from \"../Services/UserService\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst AuthContext = createContext(null);\r\nconst navigate = useNavigate\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [user, setUser] = useState(null);\r\n    \r\n    useEffect(() => {\r\n        const storedUser = localStorage.getItem('user');\r\n        if (storedUser) {\r\n            setUser(JSON.parse(storedUser));\r\n        }\r\n    }, []);\r\n    \r\n\r\n    const register = async (name, email, password) => {\r\n        try {\r\n            await userService.register(name, email, password);\r\n            toast.success('Registration successful');\r\n\r\n        } catch (err) {\r\n            toast.error(err.response.data.error);\r\n        }\r\n    };\r\n\r\n    const login = async (email, password) => {\r\n        try {\r\n            const user = await userService.login(email, password);\r\n            localStorage.setItem('user',JSON.stringify(user))\r\n            setUser(user)\r\n            toast.success('Login successful');\r\n        } catch (err) {\r\n            toast.error(err.response.data.error);\r\n        }\r\n    };\r\n\r\n    const logout = async () => {\r\n        await userService.logout();\r\n        setUser(null);\r\n        toast.success('Logout successful');\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ register, login, logout, user }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA;AACA,SAASA,QAAQ,EAAEC,UAAU,EAAEC,aAAa,EAAEC,SAAS,QAAQ,OAAO;AACtE,OAAO,KAAKC,WAAW,MAAM,yBAAyB;AACtD,SAASC,KAAK,QAAQ,gBAAgB;AACtC,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,WAAW,gBAAGP,aAAa,CAAC,IAAI,CAAC;AACvC,MAAMQ,QAAQ,GAAGJ,WAAW;AAE5B,OAAO,MAAMK,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAEtCG,SAAS,CAAC,MAAM;IACZ,MAAMa,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;IAC/C,IAAIF,UAAU,EAAE;MACZD,OAAO,CAACI,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;IACnC;EACJ,CAAC,EAAE,EAAE,CAAC;EAGN,MAAMK,QAAQ,GAAG,MAAAA,CAAOC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,KAAK;IAC9C,IAAI;MACA,MAAMpB,WAAW,CAACiB,QAAQ,CAACC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,CAAC;MACjDnB,KAAK,CAACoB,OAAO,CAAC,yBAAyB,CAAC;IAE5C,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVrB,KAAK,CAACsB,KAAK,CAACD,GAAG,CAACE,QAAQ,CAACC,IAAI,CAACF,KAAK,CAAC;IACxC;EACJ,CAAC;EAED,MAAMG,KAAK,GAAG,MAAAA,CAAOP,KAAK,EAAEC,QAAQ,KAAK;IACrC,IAAI;MACA,MAAMV,IAAI,GAAG,MAAMV,WAAW,CAAC0B,KAAK,CAACP,KAAK,EAAEC,QAAQ,CAAC;MACrDP,YAAY,CAACc,OAAO,CAAC,MAAM,EAACZ,IAAI,CAACa,SAAS,CAAClB,IAAI,CAAC,CAAC;MACjDC,OAAO,CAACD,IAAI,CAAC;MACbT,KAAK,CAACoB,OAAO,CAAC,kBAAkB,CAAC;IACrC,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVrB,KAAK,CAACsB,KAAK,CAACD,GAAG,CAACE,QAAQ,CAACC,IAAI,CAACF,KAAK,CAAC;IACxC;EACJ,CAAC;EAED,MAAMM,MAAM,GAAG,MAAAA,CAAA,KAAY;IACvB,MAAM7B,WAAW,CAAC6B,MAAM,CAAC,CAAC;IAC1BlB,OAAO,CAAC,IAAI,CAAC;IACbV,KAAK,CAACoB,OAAO,CAAC,mBAAmB,CAAC;EACtC,CAAC;EAED,oBACIjB,OAAA,CAACC,WAAW,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAAEd,QAAQ;MAAES,KAAK;MAAEG,MAAM;MAAEnB;IAAK,CAAE;IAAAF,QAAA,EAC1DA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAAC1B,EAAA,CA3CWF,YAAY;AAAA6B,EAAA,GAAZ7B,YAAY;AA6CzB,OAAO,MAAM8B,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMzC,UAAU,CAACQ,WAAW,CAAC;AAAA;AAACiC,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}