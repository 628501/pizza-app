{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\karth\\\\Desktop\\\\states\\\\src\\\\hooks\\\\UseCart.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/createContext(null);\nconst CART_KEY = 'cart';\nconst EMPTY_CART = {\n  items: [],\n  totalPrice: 0,\n  totalCount: 0\n};\nconst CartProvider = ({\n  children\n}) => {\n  _s();\n  const initCart = getCartFromLocalStorage();\n  const [cartItems, setCartItems] = useState(initCart.items);\n  const [totalPrice, setTotalPrice] = useState(initCart.totalPrice);\n  const [totalCount, setTotalCount] = useState(initCart.totalCount);\n  const [toppings, setToppings] = useState([]);\n  const removeFromCart = (foodId, toppingsToRemove) => {\n    const filteredCartItems = cartItems.filter(item => {\n      // Check if the food ID matches\n      if (item.food.id === foodId) {\n        // If toppings are provided, check if they match\n        if (toppingsToRemove) {\n          // Check if the toppings for this item match the toppings to remove\n          const itemToppings = toppings[item.food.id] || [];\n          const sameToppings = arraysEqual(itemToppings, toppingsToRemove);\n          return !sameToppings; // Return false to keep items with different toppings\n        }\n        // If no toppings provided, remove all instances of this food ID\n        return false;\n      }\n      // Keep items with different food IDs\n      return true;\n    });\n    setCartItems(filteredCartItems);\n\n    // Remove toppings related to the removed pizza\n    setToppings(prevToppings => {\n      const updatedToppings = {\n        ...prevToppings\n      };\n      delete updatedToppings[foodId];\n      return updatedToppings;\n    });\n  };\n\n  // Function to compare two arrays for equality\n  function arraysEqual(a, b) {\n    if (a === b) return true;\n    if (a == null || b == null) return false;\n    if (a.length !== b.length) return false;\n    for (let i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n  useEffect(() => {\n    const totalPrice = sum(cartItems.map(item => item.price));\n    const totalCount = sum(cartItems.map(item => item.quantity));\n    setTotalPrice(totalPrice);\n    setTotalCount(totalCount);\n    const cartData = {\n      items: cartItems,\n      totalPrice,\n      totalCount\n    };\n    localStorage.setItem(CART_KEY, JSON.stringify(cartData));\n  }, [cartItems]);\n  function getCartFromLocalStorage() {\n    const storedCart = localStorage.getItem(CART_KEY);\n    return storedCart ? JSON.parse(storedCart) : EMPTY_CART;\n  }\n  const veg = (food, value) => {\n    console.log(\"Food: \", food);\n    if (food) {\n      setToppings(prevToppings => ({\n        ...prevToppings,\n        [food.id]: prevToppings[food.id] ? prevToppings[food.id] + Number(value) : Number(value)\n      }));\n    }\n  };\n  console.log(toppings);\n  const sum = item => {\n    return item.reduce((prevValue, curValue) => prevValue + curValue, 0);\n  };\n  const changeQuantity = (cartItem, newQuantity) => {\n    const {\n      food\n    } = cartItem;\n    const price = toppings[food.id] ? (food.price + toppings[food.id]) * newQuantity : food.price * newQuantity;\n    const changedCartItem = {\n      ...cartItem,\n      quantity: newQuantity,\n      price: price\n    };\n    setCartItems(cartItems.map(item => item.food.id === food.id ? changedCartItem : item));\n  };\n  const addToCart = (food, selectedToppings = []) => {\n    const existingCartItem = cartItems.find(item => item.food.id === food.id);\n\n    // If the same pizza is already in the cart, add a new instance with the selected toppings\n    if (existingCartItem) {\n      const newCartItem = {\n        food,\n        quantity: 1,\n        price: calculatePrice(food.price, selectedToppings)\n      };\n      setCartItems([...cartItems, newCartItem]);\n    } else {\n      // Otherwise, add the pizza with selected toppings or without toppings\n      const newCartItem = {\n        food,\n        quantity: 1,\n        price: calculatePrice(food.price, selectedToppings)\n      };\n      setCartItems([...cartItems, newCartItem]);\n    }\n  };\n  const calculatePrice = (basePrice, selectedToppings) => {\n    // Calculate the total price by adding the base price and the prices of selected toppings\n    const toppingsPrice = selectedToppings.reduce((total, toppingPrice) => total + toppingPrice, 0);\n    return basePrice + toppingsPrice;\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart: {\n        items: cartItems,\n        totalPrice,\n        totalCount\n      },\n      removeFromCart,\n      changeQuantity,\n      addToCart,\n      veg\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"vctHwX6GR6oZolAVtHvMcu0/ZDQ=\");\n_c = CartProvider;\nexport default CartProvider;\nexport const useCart = () => {\n  _s2();\n  return useContext(CartContext);\n};\n_s2(useCart, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsxDEV","_jsxDEV","CartContext","CART_KEY","EMPTY_CART","items","totalPrice","totalCount","CartProvider","children","_s","initCart","getCartFromLocalStorage","cartItems","setCartItems","setTotalPrice","setTotalCount","toppings","setToppings","removeFromCart","foodId","toppingsToRemove","filteredCartItems","filter","item","food","id","itemToppings","sameToppings","arraysEqual","prevToppings","updatedToppings","a","b","length","i","sum","map","price","quantity","cartData","localStorage","setItem","JSON","stringify","storedCart","getItem","parse","veg","value","console","log","Number","reduce","prevValue","curValue","changeQuantity","cartItem","newQuantity","changedCartItem","addToCart","selectedToppings","existingCartItem","find","newCartItem","calculatePrice","basePrice","toppingsPrice","total","toppingPrice","Provider","cart","fileName","_jsxFileName","lineNumber","columnNumber","_c","useCart","_s2","$RefreshReg$"],"sources":["C:/Users/karth/Desktop/states/src/hooks/UseCart.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\r\n\r\nconst CartContext = createContext(null);\r\nconst CART_KEY = 'cart';\r\nconst EMPTY_CART = {\r\n  items: [],\r\n  totalPrice: 0,\r\n  totalCount: 0\r\n};\r\n\r\nconst CartProvider = ({ children }) => {\r\n  const initCart = getCartFromLocalStorage();\r\n  const [cartItems, setCartItems] = useState(initCart.items);\r\n  const [totalPrice, setTotalPrice] = useState(initCart.totalPrice);\r\n  const [totalCount, setTotalCount] = useState(initCart.totalCount);\r\n  const [toppings, setToppings] = useState([]);\r\n\r\n  const removeFromCart = (foodId, toppingsToRemove) => {\r\n    const filteredCartItems = cartItems.filter((item) => {\r\n      // Check if the food ID matches\r\n      if (item.food.id === foodId) {\r\n        // If toppings are provided, check if they match\r\n        if (toppingsToRemove) {\r\n          // Check if the toppings for this item match the toppings to remove\r\n          const itemToppings = toppings[item.food.id] || [];\r\n          const sameToppings = arraysEqual(itemToppings, toppingsToRemove);\r\n          return !sameToppings; // Return false to keep items with different toppings\r\n        }\r\n        // If no toppings provided, remove all instances of this food ID\r\n        return false;\r\n      }\r\n      // Keep items with different food IDs\r\n      return true;\r\n    });\r\n  \r\n    setCartItems(filteredCartItems);\r\n  \r\n    // Remove toppings related to the removed pizza\r\n    setToppings((prevToppings) => {\r\n      const updatedToppings = { ...prevToppings };\r\n      delete updatedToppings[foodId];\r\n      return updatedToppings;\r\n    });\r\n  };\r\n  \r\n  // Function to compare two arrays for equality\r\n  function arraysEqual(a, b) {\r\n    if (a === b) return true;\r\n    if (a == null || b == null) return false;\r\n    if (a.length !== b.length) return false;\r\n    for (let i = 0; i < a.length; ++i) {\r\n      if (a[i] !== b[i]) return false;\r\n    }\r\n    return true;\r\n  }\r\n  \r\n  \r\n\r\n  useEffect(() => {\r\n    const totalPrice = sum(cartItems.map((item) => item.price));\r\n    const totalCount = sum(cartItems.map((item) => item.quantity));\r\n    setTotalPrice(totalPrice);\r\n    setTotalCount(totalCount);\r\n\r\n    const cartData = {\r\n      items: cartItems,\r\n      totalPrice,\r\n      totalCount\r\n    };\r\n\r\n    localStorage.setItem(CART_KEY, JSON.stringify(cartData));\r\n  }, [cartItems]); \r\n\r\n  function getCartFromLocalStorage() {\r\n    const storedCart = localStorage.getItem(CART_KEY);\r\n    return storedCart ? JSON.parse(storedCart) : EMPTY_CART;\r\n  }\r\n\r\n  const veg = (food, value) => {\r\n    console.log(\"Food: \", food);\r\n    if (food) {\r\n      setToppings((prevToppings) => ({\r\n        ...prevToppings,\r\n        [food.id]: prevToppings[food.id] ? prevToppings[food.id] + Number(value) : Number(value)\r\n      }));\r\n    }\r\n  };\r\n\r\n  console.log(toppings);\r\n\r\n  const sum = (item) => {\r\n    return item.reduce((prevValue, curValue) => prevValue + curValue, 0);\r\n  };\r\n\r\n  const changeQuantity = (cartItem, newQuantity) => {\r\n    const { food } = cartItem;\r\n    const price = toppings[food.id]\r\n      ? (food.price + toppings[food.id]) * newQuantity\r\n      : food.price * newQuantity;\r\n\r\n    const changedCartItem = {\r\n      ...cartItem,\r\n      quantity: newQuantity,\r\n      price: price\r\n    };\r\n\r\n    setCartItems(cartItems.map((item) => (item.food.id === food.id ? changedCartItem : item)));\r\n  };\r\n\r\n  const addToCart = (food, selectedToppings = []) => {\r\n    const existingCartItem = cartItems.find((item) => item.food.id === food.id);\r\n  \r\n    // If the same pizza is already in the cart, add a new instance with the selected toppings\r\n    if (existingCartItem) {\r\n      const newCartItem = {\r\n        food,\r\n        quantity: 1,\r\n        price: calculatePrice(food.price, selectedToppings)\r\n      };\r\n  \r\n      setCartItems([...cartItems, newCartItem]);\r\n    } else {\r\n      // Otherwise, add the pizza with selected toppings or without toppings\r\n      const newCartItem = {\r\n        food,\r\n        quantity: 1,\r\n        price: calculatePrice(food.price, selectedToppings)\r\n      };\r\n  \r\n      setCartItems([...cartItems, newCartItem]);\r\n    }\r\n  };\r\n\r\n  const calculatePrice = (basePrice, selectedToppings) => {\r\n    // Calculate the total price by adding the base price and the prices of selected toppings\r\n    const toppingsPrice = selectedToppings.reduce((total, toppingPrice) => total + toppingPrice, 0);\r\n    return basePrice + toppingsPrice;\r\n  };\r\n  \r\n  \r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        cart: { items: cartItems, totalPrice, totalCount },\r\n        removeFromCart,\r\n        changeQuantity,\r\n        addToCart,\r\n        veg\r\n      }}\r\n    >\r\n      {children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n\r\nexport const useCart = () => useContext(CartContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}